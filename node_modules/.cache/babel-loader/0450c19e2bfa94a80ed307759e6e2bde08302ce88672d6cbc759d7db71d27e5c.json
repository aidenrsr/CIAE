{"ast":null,"code":"var _jsxFileName = \"/Users/chungdaecheol/CIAE_GITHUB/CIAE/src/components/TurtleVillage/DeepSea.js\",\n  _s = $RefreshSig$();\nimport './css/DeepSea.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DeepSea() {\n  _s();\n  const randomPosition = (maxX, maxY) => ({\n    x: Math.floor(Math.random() * maxX),\n    y: Math.floor(Math.random() * maxY)\n  });\n  const randomDirection = () => ({\n    x: Math.random() > 0.5 ? 1 : -1,\n    y: Math.random() > 0.5 ? 1 : -1\n  });\n  const [turtlePosition, setTurtlePosition] = useState(randomPosition(300, 300));\n  const [turtleDirection, setTurtleDirection] = useState('right');\n  const [fishPosition, setFishPosition] = useState(randomPosition(300, 300));\n  const [fishDirection, setFishDirection] = useState(randomDirection());\n  const [showBubble, setShowBubble] = useState(false);\n  const [sharkPosition, setSharkPosition] = useState(randomPosition(300, 300));\n  const [sharkDirection, setSharkDirection] = useState(randomDirection());\n  const [score, setScore] = useState(0);\n  const [life, setLife] = useState(3);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameOverOpacity, setGameOverOpacity] = useState(0);\n  const backgroundRef = useRef(null);\n\n  // 속도 설정\n  const turtleSpeed = 20;\n  const fishSpeed = 19;\n  const sharkSpeed = 19;\n\n  // 방향 벡터의 크기를 일정하게 유지하는 함수\n  const normalizeDirection = direction => {\n    const length = Math.sqrt(direction.x ** 2 + direction.y ** 2);\n    return {\n      x: direction.x / length || 1,\n      y: direction.y / length || 1\n    };\n  };\n  const adjustDirectionSlightly = direction => normalizeDirection({\n    x: direction.x + (Math.random() * 0.2 - 0.1),\n    y: direction.y + (Math.random() * 0.2 - 0.1)\n  });\n  useEffect(() => {\n    const turtleMoveInterval = setInterval(() => {\n      if (gameOver) return;\n      setTurtlePosition(pos => {\n        const backgroundRect = backgroundRef.current.getBoundingClientRect();\n        let newPosition = {\n          ...pos\n        };\n        switch (turtleDirection) {\n          case 'up':\n            newPosition.y = Math.max(0, pos.y - turtleSpeed);\n            break;\n          case 'down':\n            newPosition.y = Math.min(backgroundRect.height - 50, pos.y + turtleSpeed);\n            break;\n          case 'left':\n            newPosition.x = Math.max(0, pos.x - turtleSpeed);\n            break;\n          case 'right':\n            newPosition.x = Math.min(backgroundRect.width - 50, pos.x + turtleSpeed);\n            break;\n          default:\n            break;\n        }\n        return newPosition;\n      });\n    }, 50);\n    return () => clearInterval(turtleMoveInterval);\n  }, [gameOver, turtleDirection]);\n  useEffect(() => {\n    const moveEntity = (position, direction, speed, maxWidth, maxHeight) => {\n      const adjustedDirection = adjustDirectionSlightly(direction);\n      let newX = position.x + adjustedDirection.x * speed;\n      let newY = position.y + adjustedDirection.y * speed;\n      if (newX <= 0 || newX >= maxWidth) adjustedDirection.x *= -1;\n      if (newY <= 0 || newY >= maxHeight) adjustedDirection.y *= -1;\n      return {\n        position: {\n          x: Math.min(maxWidth, Math.max(0, newX)),\n          y: Math.min(maxHeight, Math.max(0, newY))\n        },\n        direction: adjustedDirection\n      };\n    };\n    const backgroundRect = backgroundRef.current.getBoundingClientRect();\n    const fishMoveInterval = setInterval(() => {\n      setFishPosition(pos => {\n        const result = moveEntity(pos, fishDirection, fishSpeed, backgroundRect.width - 30, backgroundRect.height - 30);\n        setFishDirection(result.direction);\n        return result.position;\n      });\n    }, 50);\n    const sharkMoveInterval = setInterval(() => {\n      setSharkPosition(pos => {\n        const result = moveEntity(pos, sharkDirection, sharkSpeed, backgroundRect.width - 30, backgroundRect.height - 30);\n        setSharkDirection(result.direction);\n        return result.position;\n      });\n    }, 50);\n    return () => {\n      clearInterval(fishMoveInterval);\n      clearInterval(sharkMoveInterval);\n    };\n  }, [fishDirection, sharkDirection, gameOver]);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (gameOver) return;\n      switch (event.key) {\n        case 'ArrowUp':\n          setTurtleDirection('up');\n          break;\n        case 'ArrowDown':\n          setTurtleDirection('down');\n          break;\n        case 'ArrowLeft':\n          setTurtleDirection('left');\n          break;\n        case 'ArrowRight':\n          setTurtleDirection('right');\n          break;\n        default:\n          return;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [gameOver]);\n  useEffect(() => {\n    const backgroundRect = backgroundRef.current.getBoundingClientRect();\n    const turtleRect = {\n      left: turtlePosition.x,\n      right: turtlePosition.x + 50,\n      top: turtlePosition.y,\n      bottom: turtlePosition.y + 50\n    };\n    const fishRect = {\n      left: fishPosition.x,\n      right: fishPosition.x + 30,\n      top: fishPosition.y,\n      bottom: fishPosition.y + 30\n    };\n    const sharkRect = {\n      left: sharkPosition.x,\n      right: sharkPosition.x + 30,\n      top: sharkPosition.y,\n      bottom: sharkPosition.y + 30\n    };\n    if (turtleRect.left < fishRect.right && turtleRect.right > fishRect.left && turtleRect.top < fishRect.bottom && turtleRect.bottom > fishRect.top) {\n      setShowBubble(true);\n      setTimeout(() => setShowBubble(false), 1000);\n      setFishPosition({\n        x: Math.random() * (backgroundRect.width - 30),\n        y: Math.random() * (backgroundRect.height - 30)\n      });\n      setScore(score + 1);\n    }\n    if (turtleRect.left < sharkRect.right && turtleRect.right > sharkRect.left && turtleRect.top < sharkRect.bottom && turtleRect.bottom > sharkRect.top) {\n      setGameOver(true);\n    }\n  }, [turtlePosition, fishPosition, sharkPosition, gameOver]);\n  useEffect(() => {\n    if (gameOver) {\n      setGameOverOpacity(1);\n    }\n  }, [gameOver]);\n  const restartGame = () => {\n    const backgroundRect = backgroundRef.current.getBoundingClientRect();\n    setTurtlePosition(randomPosition(backgroundRect.width - 50, backgroundRect.height - 50));\n    setFishPosition(randomPosition(backgroundRect.width - 30, backgroundRect.height - 30));\n    setSharkPosition(randomPosition(backgroundRect.width - 30, backgroundRect.height - 30));\n    setScore(0);\n    setGameOver(false);\n    setGameOverOpacity(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameOver\",\n      style: {\n        opacity: gameOverOpacity,\n        transition: 'opacity 1s'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"OverMent\",\n        children: \"\\uAC8C\\uC784 \\uC624\\uBC84!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"ScoreMent\",\n        children: [\"\\uC810\\uC218: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Restart\",\n        onClick: restartGame,\n        children: \"\\uB2E4\\uC2DC \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"pageName\",\n        children: \"\\uC2EC\\uD574\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/Login\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"logOut\",\n          children: \"\\uB85C\\uADF8\\uC544\\uC6C3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"DeepSea_Background\",\n        ref: backgroundRef,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"Score\",\n          children: [\"\\uC810\\uC218: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/UnderTheSea.png\",\n          className: \"UnderTheSea_Image\",\n          alt: \"UnderTheSea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: `${fishPosition.x}px`,\n            top: `${fishPosition.y}px`,\n            width: '30px',\n            height: '30px',\n            backgroundColor: 'Yellow'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/Turtle_Right.png\",\n          alt: \"Turtle\",\n          style: {\n            position: 'absolute',\n            left: `${turtlePosition.x}px`,\n            top: `${turtlePosition.y}px`,\n            transform: `rotate(${turtleDirection === 'left' ? '180deg' : turtleDirection === 'up' ? '-90deg' : turtleDirection === 'down' ? '90deg' : '0deg'})`,\n            transition: 'left 0.1s, top 0.1s',\n            width: '10%',\n            height: '10%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this), showBubble && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: `${turtlePosition.x + 60}px`,\n            top: `${turtlePosition.y - 30}px`,\n            backgroundColor: 'white',\n            borderRadius: '15px',\n            padding: '5px 10px',\n            boxShadow: '0 0 5px rgba(0,0,0,0.3)'\n          },\n          children: \"'\\uB9DB\\uC788\\uC5B4!'\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: `${sharkPosition.x}px`,\n            top: `${sharkPosition.y}px`,\n            width: '30px',\n            height: '30px',\n            backgroundColor: 'red'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 9\n  }, this);\n}\n_s(DeepSea, \"W58mcC9e7iSY4yv1n9yHSyymqQI=\");\n_c = DeepSea;\nvar _c;\n$RefreshReg$(_c, \"DeepSea\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","jsxDEV","_jsxDEV","DeepSea","_s","randomPosition","maxX","maxY","x","Math","floor","random","y","randomDirection","turtlePosition","setTurtlePosition","turtleDirection","setTurtleDirection","fishPosition","setFishPosition","fishDirection","setFishDirection","showBubble","setShowBubble","sharkPosition","setSharkPosition","sharkDirection","setSharkDirection","score","setScore","life","setLife","gameOver","setGameOver","gameOverOpacity","setGameOverOpacity","backgroundRef","turtleSpeed","fishSpeed","sharkSpeed","normalizeDirection","direction","length","sqrt","adjustDirectionSlightly","turtleMoveInterval","setInterval","pos","backgroundRect","current","getBoundingClientRect","newPosition","max","min","height","width","clearInterval","moveEntity","position","speed","maxWidth","maxHeight","adjustedDirection","newX","newY","fishMoveInterval","result","sharkMoveInterval","handleKeyDown","event","key","window","addEventListener","removeEventListener","turtleRect","left","right","top","bottom","fishRect","sharkRect","setTimeout","restartGame","children","className","style","opacity","transition","fileName","_jsxFileName","lineNumber","columnNumber","onClick","to","ref","src","alt","backgroundColor","transform","borderRadius","padding","boxShadow","_c","$RefreshReg$"],"sources":["/Users/chungdaecheol/CIAE_GITHUB/CIAE/src/components/TurtleVillage/DeepSea.js"],"sourcesContent":["import './css/DeepSea.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function DeepSea() {\n    const randomPosition = (maxX, maxY) => ({\n        x: Math.floor(Math.random() * maxX),\n        y: Math.floor(Math.random() * maxY),\n    });\n\n    const randomDirection = () => ({\n        x: Math.random() > 0.5 ? 1 : -1,\n        y: Math.random() > 0.5 ? 1 : -1,\n    });\n\n    const [turtlePosition, setTurtlePosition] = useState(randomPosition(300, 300));\n    const [turtleDirection, setTurtleDirection] = useState('right');\n    const [fishPosition, setFishPosition] = useState(randomPosition(300, 300));\n    const [fishDirection, setFishDirection] = useState(randomDirection());\n    const [showBubble, setShowBubble] = useState(false);\n    const [sharkPosition, setSharkPosition] = useState(randomPosition(300, 300));\n    const [sharkDirection, setSharkDirection] = useState(randomDirection());\n    const [score, setScore] = useState(0);\n    const [life, setLife] = useState(3);\n    const [gameOver, setGameOver] = useState(false);\n    const [gameOverOpacity, setGameOverOpacity] = useState(0);\n    const backgroundRef = useRef(null);\n    \n    // 속도 설정\n    const turtleSpeed = 20;\n    const fishSpeed = 19;\n    const sharkSpeed = 19;\n\n    // 방향 벡터의 크기를 일정하게 유지하는 함수\n    const normalizeDirection = (direction) => {\n        const length = Math.sqrt(direction.x ** 2 + direction.y ** 2);\n        return {\n            x: (direction.x / length) || 1,\n            y: (direction.y / length) || 1,\n        };\n    };\n\n    const adjustDirectionSlightly = (direction) => normalizeDirection({\n        x: direction.x + (Math.random() * 0.2 - 0.1),\n        y: direction.y + (Math.random() * 0.2 - 0.1),\n    });\n\n    useEffect(() => {\n        const turtleMoveInterval = setInterval(() => {\n            if (gameOver) return;\n\n            setTurtlePosition((pos) => {\n                const backgroundRect = backgroundRef.current.getBoundingClientRect();\n                let newPosition = { ...pos };\n\n                switch (turtleDirection) {\n                    case 'up':\n                        newPosition.y = Math.max(0, pos.y - turtleSpeed);\n                        break;\n                    case 'down':\n                        newPosition.y = Math.min(backgroundRect.height - 50, pos.y + turtleSpeed);\n                        break;\n                    case 'left':\n                        newPosition.x = Math.max(0, pos.x - turtleSpeed);\n                        break;\n                    case 'right':\n                        newPosition.x = Math.min(backgroundRect.width - 50, pos.x + turtleSpeed);\n                        break;\n                    default:\n                        break;\n                }\n                return newPosition;\n            });\n        }, 50);\n\n        return () => clearInterval(turtleMoveInterval);\n    }, [gameOver, turtleDirection]);\n\n    useEffect(() => {\n        const moveEntity = (position, direction, speed, maxWidth, maxHeight) => {\n            const adjustedDirection = adjustDirectionSlightly(direction);\n            let newX = position.x + adjustedDirection.x * speed;\n            let newY = position.y + adjustedDirection.y * speed;\n\n            if (newX <= 0 || newX >= maxWidth) adjustedDirection.x *= -1;\n            if (newY <= 0 || newY >= maxHeight) adjustedDirection.y *= -1;\n\n            return {\n                position: {\n                    x: Math.min(maxWidth, Math.max(0, newX)),\n                    y: Math.min(maxHeight, Math.max(0, newY)),\n                },\n                direction: adjustedDirection,\n            };\n        };\n\n        const backgroundRect = backgroundRef.current.getBoundingClientRect();\n\n        const fishMoveInterval = setInterval(() => {\n            setFishPosition((pos) => {\n                const result = moveEntity(pos, fishDirection, fishSpeed, backgroundRect.width - 30, backgroundRect.height - 30);\n                setFishDirection(result.direction);\n                return result.position;\n            });\n        }, 50);\n\n        const sharkMoveInterval = setInterval(() => {\n            setSharkPosition((pos) => {\n                const result = moveEntity(pos, sharkDirection, sharkSpeed, backgroundRect.width - 30, backgroundRect.height - 30);\n                setSharkDirection(result.direction);\n                return result.position;\n            });\n        }, 50);\n\n        return () => {\n            clearInterval(fishMoveInterval);\n            clearInterval(sharkMoveInterval);\n        };\n    }, [fishDirection, sharkDirection, gameOver]);\n\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (gameOver) return;\n\n            switch (event.key) {\n                case 'ArrowUp':\n                    setTurtleDirection('up');\n                    break;\n                case 'ArrowDown':\n                    setTurtleDirection('down');\n                    break;\n                case 'ArrowLeft':\n                    setTurtleDirection('left');\n                    break;\n                case 'ArrowRight':\n                    setTurtleDirection('right');\n                    break;\n                default:\n                    return;\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [gameOver]);\n\n    useEffect(() => {\n        const backgroundRect = backgroundRef.current.getBoundingClientRect();\n\n        const turtleRect = {\n            left: turtlePosition.x,\n            right: turtlePosition.x + 50,\n            top: turtlePosition.y,\n            bottom: turtlePosition.y + 50,\n        };\n        const fishRect = {\n            left: fishPosition.x,\n            right: fishPosition.x + 30,\n            top: fishPosition.y,\n            bottom: fishPosition.y + 30,\n        };\n        const sharkRect = {\n            left: sharkPosition.x,\n            right: sharkPosition.x + 30,\n            top: sharkPosition.y,\n            bottom: sharkPosition.y + 30,\n        };\n\n        if (\n            turtleRect.left < fishRect.right &&\n            turtleRect.right > fishRect.left &&\n            turtleRect.top < fishRect.bottom &&\n            turtleRect.bottom > fishRect.top\n        ) {\n            setShowBubble(true);\n            setTimeout(() => setShowBubble(false), 1000);\n            setFishPosition({\n                x: Math.random() * (backgroundRect.width - 30),\n                y: Math.random() * (backgroundRect.height - 30),\n            });\n            setScore(score + 1);\n        }\n\n        if (\n            turtleRect.left < sharkRect.right &&\n            turtleRect.right > sharkRect.left &&\n            turtleRect.top < sharkRect.bottom &&\n            turtleRect.bottom > sharkRect.top\n        ) {\n            setGameOver(true);\n        }\n    }, [turtlePosition, fishPosition, sharkPosition, gameOver]);\n\n    useEffect(() => {\n        if (gameOver) {\n            setGameOverOpacity(1);\n        }\n    }, [gameOver]);\n\n    const restartGame = () => {\n        const backgroundRect = backgroundRef.current.getBoundingClientRect();\n        setTurtlePosition(randomPosition(backgroundRect.width - 50, backgroundRect.height - 50));\n        setFishPosition(randomPosition(backgroundRect.width - 30, backgroundRect.height - 30));\n        setSharkPosition(randomPosition(backgroundRect.width - 30, backgroundRect.height - 30));\n        setScore(0);\n        setGameOver(false);\n        setGameOverOpacity(0);\n    };\n\n    return (\n        <div>\n            {gameOver && (\n                <div className='gameOver' style={{ opacity: gameOverOpacity, transition: 'opacity 1s' }}>\n                    <h1 className='OverMent'>게임 오버!</h1>\n                    <h3 className='ScoreMent'>점수: {score}</h3>\n                    <button className='Restart' onClick={restartGame}>다시 시작</button>\n                </div>\n            )}\n            <div className='menu'>\n                <p className='pageName'>심해</p>\n                <Link to='/Login'><p className='logOut'>로그아웃</p></Link>\n                <div className='DeepSea_Background' ref={backgroundRef}>\n                    <p className='Score'>점수: {score}</p>\n                    <img src='/UnderTheSea.png' className='UnderTheSea_Image' alt='UnderTheSea'></img>\n                    <div \n                        style={{\n                            position: 'absolute',\n                            left: `${fishPosition.x}px`,\n                            top: `${fishPosition.y}px`,\n                            width: '30px',\n                            height: '30px',\n                            backgroundColor: 'Yellow',\n                        }}\n                    />\n                    <img \n                        src='/Turtle_Right.png' \n                        alt='Turtle'\n                        style={{\n                            position: 'absolute',\n                            left: `${turtlePosition.x}px`,\n                            top: `${turtlePosition.y}px`,\n                            transform: `rotate(${turtleDirection === 'left' ? '180deg' : turtleDirection === 'up' ? '-90deg' : turtleDirection === 'down' ? '90deg' : '0deg'})`,\n                            transition: 'left 0.1s, top 0.1s',\n                            width: '10%',\n                            height: '10%',\n                        }}\n                    />\n                    {showBubble && (\n                        <div style={{\n                            position: 'absolute',\n                            left: `${turtlePosition.x + 60}px`,\n                            top: `${turtlePosition.y - 30}px`,\n                            backgroundColor: 'white',\n                            borderRadius: '15px',\n                            padding: '5px 10px',\n                            boxShadow: '0 0 5px rgba(0,0,0,0.3)',\n                        }}>\n                            '맛있어!'\n                        </div>\n                    )}\n                    <div\n                        style={{\n                            position: 'absolute',\n                            left: `${sharkPosition.x}px`,\n                            top: `${sharkPosition.y}px`,\n                            width: '30px',\n                            height: '30px',\n                            backgroundColor: 'red',\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}